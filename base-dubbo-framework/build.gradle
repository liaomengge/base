plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.17'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'com.github.spotbugs' version '4.7.2'
    id 'com.diffplug.spotless' version '5.12.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

apply plugin: 'project-report'
apply from: "${rootProject.projectDir}/gradle/latest-version.gradle"

wrapper {
    gradleVersion = '5.6.4'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'io.spring.dependency-management'

    apply from: "${rootProject.projectDir}/gradle/spotless.gradle"
    apply from: "${rootProject.projectDir}/gradle/spotbug.gradle"

    group = 'com.github.liaomengge'
    version = '3.2.0-SNAPSHOT'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    tasks.withType(Javadoc).all {
        enabled = false
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    [compileJava, compileTestJava].each() {
        //it.options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:-options"]
        it.options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        maven { url 'http://127.0.0.1:8089/repository/fly-snapshots/' }
        maven { url 'http://127.0.0.1:8089/repository/fly-releases/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            imports {
                mavenBom "com.github.liaomengge:base-platform-bom:${version}"
            }
        }
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    dependencies {
        api("com.github.liaomengge:base-common-middleware:${version}") {
            exclude(module: 'base-common-utils')
        }

        api "com.github.liaomengge:base-common-utils:${version}"

        /************************************************华丽的分割线***************************************************/

        api("com.alibaba:dubbo") {
            exclude(module: 'log4j')
            exclude(module: 'logback-classic')
            exclude(module: 'slf4j-log4j12')
            exclude(group: 'org.springframework')
        }

        api "org.glassfish.web:javax.el"
        api "org.apache.tomcat.embed:tomcat-embed-core"

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation "junit:junit"
    }
}



